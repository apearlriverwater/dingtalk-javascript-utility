{"version":3,"file":"dingtalk-javascript-utility-min.js","sources":["../src/package/dingtalk-querystring/index.js","../src/package/dingtalk-url/index.js","../src/package/dingtalk-env/index.js","../src/package/dingtalk-version/index.js","../src/package/dingtalk-require/index.js","../src/package/dingtalk-document/index.js","../src/package/dingtalk-timer/index.js","../src/package/dingtalk-log/index.js","../src/package/dingtalk-callTransform/index.js","../src/index.js"],"sourcesContent":["function parse(qs, sep, eq){\n  const obj = Object.create(null);\n  if (typeof qs !== 'string' || qs.length === 0 ){\n    return obj;\n  }\n  sep = sep || '&';\n  eq = eq || '=';\n  const params = qs.split(sep);\n  let i = 0;\n  let l = params.length;\n  for(;i<l;i++){\n    let items = params[i].split(eq);\n    let queryKey = items[0].trim();\n    let queryVal = '';\n    if (items.length >= 3){\n      items.splice(0,1);\n      let lastIndex = items.length - 1;\n      items.forEach(function(v,i){\n        v = v.trim();\n        if (i === lastIndex){\n          queryVal += v;\n        } else {\n          queryVal += v + eq\n        }\n      });\n    } else {\n      queryVal = items[1].trim();\n    }\n    let cur = obj[queryKey];\n    if (cur){\n      if (Array.isArray(cur)){\n        cur.push(decodeURIComponent(queryVal));\n      } else {\n        let temp = cur;\n        obj[queryKey] = new Array();\n        obj[queryKey].push(temp);\n        obj[queryKey].push(decodeURIComponent(queryVal));\n      }\n    } else {\n      obj[queryKey] = decodeURIComponent(queryVal);\n    }\n  }\n  return obj;\n}\n\nfunction stringify(obj, sep, eq){\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj !== null && typeof obj === 'object'){\n    const keys = Object.keys(obj);\n    const len = keys.length;\n    const flast = len - 1;\n    let fields = '';\n    let i = 0;\n    for (;i<len; i++){\n      let k = keys[i];\n      let v = obj[k];\n      let ks = k + eq;\n      if (Array.isArray(v)){\n        let vlen = v.length;\n        let vlast = vlen - 1;\n        let j = 0;\n        for (; j < vlen; ++j) {\n           fields += ks + decodeURIComponent(v[j]);\n           if (j < vlast){\n             fields += sep;\n           }\n        }\n        if (vlen && i < flast){\n          fields += sep;\n        }\n      } else {\n        fields += ks + decodeURIComponent(v);\n        if (i < flast){\n          fields += sep;\n        }\n      }\n    }\n    return fields;\n  }\n  return '';\n}\n\nexport default {\n  stringify,\n  parse\n};\n","import querystring from '../dingtalk-querystring';\n\nfunction format(url, query){\n  let search = querystring.stringify(query);\n  return url + '?' + search;\n}\n\nfunction parse(url,parseQueryString){\n  let location = {\n    hash: null,\n    search: null\n  };\n  if (!url){\n    return {};\n  }\n  const searchIndex = url.indexOf('?');\n  if (searchIndex === -1){\n    return {};\n  }\n  const hashIndex = url.indexOf('#');\n  if (hashIndex > -1){\n    location.hash = url.slice(hashIndex);\n    location.search = url.slice(searchIndex, hashIndex);\n  } else {\n    location.search = url.slice(searchIndex);\n  }\n  const searchString = location.search.slice(1);\n  const query = querystring.parse(searchString);\n  if (typeof parseQueryString === 'string' && parseQueryString.length > 0){\n    return query[parseQueryString];\n  } else {\n    return query;\n  }\n}\n\nexport default {\n  format,\n  parse\n}\n","import url from '../dingtalk-url';\n\nfunction getEnv(){\n  let containerEnv = {};\n  if (typeof weex !== 'undefined'){\n    const config = weex.config;\n    const env = config.env;\n    containerEnv.platform = env.platform;\n    containerEnv.bundleFrameworkType = 'Vue';\n    if (containerEnv.platform !== 'Web'){\n      containerEnv.dingtalk = {\n        bundleUrl: config.bundleUrl,\n        originalUrl: config.originalUrl\n      };\n      containerEnv.appVersion = env.appVersion;\n      containerEnv.appName = env.appName;\n    } else {\n      // Vue Web\n      const href = location.href;\n      const tpl = url.parse(href,'dd_wx_tpl');\n      const _wx_tpl = url.parse(href,'_wx_tpl');\n      containerEnv.dingtalk = {\n        bundleUrl: tpl ? tpl : _wx_tpl ? _wx_tpl : '',\n        originalUrl: href\n      }\n    }\n  } else {\n    // Rax Weex\n    if (typeof callNative === 'function'){\n      containerEnv.platform = navigator.platform;\n      containerEnv.appName = navigator.appName;\n      containerEnv.appVersion = navigator.appVersion;\n      containerEnv.dingtalk = {\n        bundleUrl: __weex_options__.bundleUrl,\n        originalUrl: __weex_options__.originalUrl\n      };\n    } else {\n      // Rax Web\n      containerEnv.platform = 'Web';\n      const href = location.href;\n      const tpl = url.parse(href,'dd_wx_tpl');\n      const _wx_tpl = url.parse(href,'_wx_tpl');\n      containerEnv.dingtalk = {\n        bundleUrl: tpl ? tpl : _wx_tpl ? _wx_tpl : '',\n        originalUrl: href\n      }\n    }\n    containerEnv.bundleFrameworkType = 'Rax';\n  }\n  return containerEnv;\n}\n\nconst env = getEnv();\nconst isWeb = env.platform === 'Web';\nconst isWeexiOS = env.platform === 'iOS';\nconst isWeexAndroid = env.platform === 'android';\nconst isWeex = isWeexiOS || isWeexAndroid;\nconst { dingtalk, bundleFrameworkType } = env;\nconst { bundleUrl, originalUrl } = dingtalk;\n\nlet UA;\nif(isWeb){\n  UA = window.navigator.userAgent.toLowerCase();\n}\n\nconst isDingtalk = dingtalkContainer();\n\nfunction dingtalkContainer(){\n  if (isWeex){\n    if (env.appName === 'DingTalk' || env.appName === 'com.alibaba.android.rimet'){\n      return true;\n    }\n    return false;\n  } else {\n    return UA && UA.indexOf('dingtalk') > -1;\n  }\n}\n\nfunction webAndroid(){\n  if (isWeb){\n    return UA && UA.indexOf('android') > -1;\n  }\n  return null;\n}\n\nfunction webiOS(){\n  if (isWeb){\n    return UA && /iphone|ipad|ipod|ios/.test(UA);\n  }\n  return null;\n}\n\nfunction fetchVersion(){\n  if (isWeb){\n    let matches = UA.match(/aliapp\\(\\w+\\/([a-zA-Z0-9.-]+)\\)/);\n    if (matches === null) {\n        matches = UA.match(/dingtalk\\/([a-zA-Z0-9.-]+)/);\n    }\n    let version = matches && matches[1];\n    return version;\n  } else {\n    return env.appVersion;\n  }\n}\n\nconst isWebiOS = webiOS();\nconst isWebAndroid = webAndroid();\nconst version = fetchVersion();\n\nfunction toPlatform(){\n  let platform;\n  if(isDingtalk){\n    if (isWebAndroid){\n      platform = 'web.android';\n    } else if (isWebiOS) {\n      platform = 'web.ios';\n    } else if (isWeexAndroid){\n      platform = 'weex.android';\n    } else if (isWeexiOS){\n      platform = 'weex.ios';\n    }\n  } else {\n    platform = 'not.dingtalk'\n  }\n  return platform;\n}\n\nexport default {\n  isDingtalk,\n  isWeb,\n  isWebiOS,\n  isWebAndroid,\n  isWeex,\n  isWeexiOS,\n  isWeexAndroid,\n  bundleFrameworkType,\n  bundleUrl,\n  originalUrl,\n  version,\n  platform: toPlatform()\n};\n","\nexport default function compareVersion (oldVersion, newVersion, containEqual){\n  if (typeof oldVersion !== 'string' || typeof newVersion !== 'string') {\n    return false;\n  }\n  //分割字符串为['1', '0', '1']格式\n  let oldArray = oldVersion.split('.');\n  let newArray = newVersion.split('.');\n  let o;\n  let n;\n  do {\n    o = oldArray.shift();\n    n = newArray.shift();\n  } while (o === n && newArray.length > 0);\n  if (containEqual) {\n    return (n | 0) >= (o | 0);\n  } else {\n    return (n | 0) > (o | 0);\n  }\n}\n","import env from '../dingtalk-env';\n\nconst { bundleFrameworkType,isWeex } = env;\n\nexport default function requireModule(name){\n  if (isWeex){\n    if (bundleFrameworkType === 'Vue'){\n      return weex.requireModule(name);\n    } else {\n      let moduleName = '@weex-module/' + name;\n      return __weex_require__(moduleName);\n    }\n  } else {\n    if (bundleFrameworkType === 'Vue'){\n      return weex.requireModule(name);\n    }\n  }\n}\n","import env from '../dingtalk-env';\n\nconst { bundleFrameworkType, isWeex } = env;\n\nfunction Document(){\n  if ( isWeex && bundleFrameworkType === 'Vue'){\n    return weex.document;\n  } else {\n    return document;\n  }\n}\n\nconst doc = Document();\n\nexport default doc;\n","import requireModule from '../dingtalk-require';\nimport document from '../dingtalk-document';\nimport env from '../dingtalk-env';\n\nconst timer = requireModule('timer');\nconst { isWeex } = env;\n\nfunction setTimeout(handler,time){\n  if (isWeex){\n    timer.setTimeout(handler,time);\n    return document.taskCenter.callbackManager.lastCallbackId.toString();\n  } else {\n    return window.setTimeout(handler,time);\n  }\n}\n\nfunction clearTimeout(n){\n  if (isWeex){\n    timer.clearTimeout(n);\n  } else {\n    window.clearTimeout(n);\n  }\n}\n\nfunction setInterval(handler,time){\n  if (isWeex){\n    timer.setInterval(handler,time);\n    return document.taskCenter.callbackManager.lastCallbackId.toString();\n  } else {\n    return window.setInterval(handler,time);\n  }\n}\n\nfunction clearInterva(n){\n  if (isWeex){\n    timer.clearInterva(n);\n  } else {\n    window.clearInterva(n);\n  }\n}\n\nexport default {\n  setTimeout,\n  clearTimeout,\n  setInterval,\n  clearInterva\n};\n","const LOG = 'LOG';\nconst INFO = 'INFO';\nconst WARNING = 'WARNING';\nconst ERROR = 'ERROR';\n\nconst LogType = {\n  LOG,\n  INFO,\n  WARNING,\n  ERROR\n}\n\nfunction fillZore(str) {\n    const res = '00' + str;\n    return res.substring(res.length - 2);\n}\n\nlet logChannel = (logData) => {\n  const time = fillZore(logData.time.getHours())\n      + ':' + fillZore(logData.time.getMinutes())\n      + ':' + fillZore(logData.time.getSeconds());\n  switch (logData.type) {\n    case LogType.LOG:\n        console.log('time:'+ time +' | log: ', ...logData.logArr);\n      break;\n    case LogType.INFO:\n        console.info('time:'+ time + ' | info: ', ...logData.logArr);\n      break;\n    case LogType.ERROR:\n        console.error('time:'+ time +' | error: ', ...logData.logArr);\n      break;\n    case LogType.WARNING:\n        console.warn('time:'+ time +' | warning: ', ...logData.logArr);\n      break;\n    default:\n      break;\n  }\n};\n\nconst setLog = (fn) => {\n    logChannel = fn;\n};\n\nconst log = (logArr, type = LogType.LOG) => {\n  logChannel({\n    type,\n    logArr,\n    time: new Date(),\n  });\n};\n\nexport default {\n  log,\n  setLog,\n  LogType\n}\n","\nlet dingtalkSDK;\n\nfunction run(fn){\n  dingtalkSDK.ready(() => {\n    fn(dingtalkSDK.apis);\n  });\n}\n\nfunction callTransform(names, opt = {}){\n  return new Promise((resolve, reject) => {\n    run(apis => {\n      const seq = names.split('.');\n      let func = apis;\n      seq.forEach(next => func = func[next]);\n      if (typeof func === 'function'){\n        opt.onSuccess = (data) => resolve(data);\n        opt.onFail = (err) => reject(err);\n        func(opt);\n      } else {\n        throw new Error('Not Found');\n      }\n    });\n  });\n}\n\nfunction setCallTransformSource(dingtalk){\n  dingtalkSDK = dingtalk || {};\n}\n\nexport default {\n  callTransform,\n  setCallTransformSource\n};","import querystring from './package/dingtalk-querystring';\nimport url from './package/dingtalk-url';\nimport env from './package/dingtalk-env';\nimport compareVersion from './package/dingtalk-version';\nimport requireModule from './package/dingtalk-require';\nimport document from './package/dingtalk-document';\nimport timer from './package/dingtalk-timer';\nimport logger from './package/dingtalk-log';\nimport dingtalkCallTransform from './package/dingtalk-callTransform';\n\nconst { log, setLog, LogType } = logger;\nconst { callTransform, setCallTransformSource } = dingtalkCallTransform;\n\nexport default {\n  querystring,\n  url,\n  env,\n  compareVersion,\n  requireModule,\n  document,\n  timer,\n  LogType, \n  setLog, \n  log,\n  callTransform,\n  setCallTransformSource\n};"],"names":["parse","qs","sep","eq","obj","Object","create","length","params","split","i","l","items","queryKey","trim","queryVal","splice","lastIndex","forEach","v","cur","Array","isArray","push","decodeURIComponent","temp","stringify","keys","len","flast","fields","k","ks","vlen","vlast","j","format","url","query","querystring","parseQueryString","location","searchIndex","indexOf","hashIndex","hash","slice","search","searchString","getEnv","containerEnv","weex","config","env","platform","bundleFrameworkType","dingtalk","bundleUrl","originalUrl","appVersion","appName","href","tpl","_wx_tpl","callNative","navigator","__weex_options__","dingtalkContainer","isWeex","UA","webAndroid","isWeb","webiOS","test","fetchVersion","matches","match","toPlatform","isDingtalk","isWebAndroid","isWebiOS","isWeexAndroid","isWeexiOS","compareVersion","oldVersion","newVersion","containEqual","oldArray","newArray","o","n","shift","requireModule","name","moduleName","__weex_require__","Document","document","setTimeout","handler","time","taskCenter","callbackManager","lastCallbackId","toString","window","clearTimeout","setInterval","clearInterva","fillZore","str","res","substring","run","fn","ready","dingtalkSDK","apis","callTransform","names","opt","Promise","resolve","reject","seq","func","next","Error","onSuccess","data","onFail","err","setCallTransformSource","userAgent","toLowerCase","version","doc","timer","LOG","INFO","WARNING","ERROR","LogType","logChannel","logData","getHours","getMinutes","getSeconds","type","log","logArr","info","error","warn","setLog","Date","logger","dingtalkCallTransform"],"mappings":"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"}