{"version":3,"sources":["../../src/dingtalk-env/index.js"],"names":["maybeInWebView","window","maybeInWeexVueEnv","weex","maybeInNative","callNative","log","LogType","snifferWeexRaxMap","snifferWebViewMap","snifferWeexVueMap","PLATFORMS","WEB","NATIVE","UNKNOWN","FRAMEWORK","VUE","RAX","snifferMachine","snifferMap","source","j","length","i","result","platform","split","platformEnv","framework","dingtalkWebUrl","originalUrl","tpl","parse","_wx_tpl","bundleUrl","getEnv","containerEnv","config","env","bundleFrameworkType","appVersion","appName","dingtalk","location","href","navigator","__weex_options__","WARNING","isWeb","isWeexiOS","isWeexAndroid","isWeex","ua","userAgent","toLowerCase","getPcConf","tempConf","frameName","name","frameConf","JSON","containerId","version","hostVersion","language","e","stringify","UA","pcConf","mdContainer","indexOf","pdContainer","fetchVersion","matches","match","isWebiOS","test","isWebAndroid","isMobileDingtalk","isWindowsDingtalk","isMac","isWin","isPC"],"mappings":"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","file":"index.js","sourcesContent":["import url from '../dingtalk-url';\nimport logger from '../dingtalk-log';\n\nconst maybeInWebView = typeof window !== 'undefined';\nconst maybeInWeexVueEnv = typeof weex !== 'undefined';\nconst maybeInNative = typeof callNative !== 'undefined';\nconst { log, LogType } = logger;\n\nconst snifferWeexRaxMap = [\n  '__weex_config__',\n  '__weex_options__',\n  '__weex_require__'\n];\n\nconst snifferWebViewMap = [\n  'localStorage',\n  'location',\n  'navigator',\n  'XMLHttpRequest'\n];\n\nconst snifferWeexVueMap = [\n  'config',\n  'requireModule',\n  'document'\n];\n\nconst PLATFORMS = {\n  WEB: 'Web',\n  NATIVE: 'Native',\n  UNKNOWN: 'Unknown'\n};\n\nconst FRAMEWORK = {\n  VUE: 'Vue',\n  RAX: 'Rax',\n  UNKNOWN: 'Unknown'\n};\n\nfunction snifferMachine(snifferMap,source){\n  const j = snifferMap.length;\n  let i = 0;\n  let result = true;\n  for(;i < j; i++){\n    if (!source[snifferMap[i]]){\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nconst platform = (() => {\n  if (maybeInWebView && maybeInWeexVueEnv){\n    // webview\n    return snifferMachine(snifferWeexVueMap,weex) ? 'Web.Vue' : 'Web.Unknown';\n  } else if (!maybeInWebView && maybeInWeexVueEnv){\n    // native\n    return snifferMachine(snifferWeexVueMap,weex) ? 'Native.Vue' : 'Native.Unknown';\n  } else if (maybeInWebView && maybeInNative && !maybeInWeexVueEnv){\n    // native\n    return snifferMachine(snifferWeexRaxMap,window) ? 'Native.Rax' : 'Native.Unknown';\n  } else {\n    // default webview\n    if (maybeInWebView){\n      return snifferMachine(snifferWebViewMap,window) ? 'Web.Unknown' : 'Unknown.Unknown';\n    } \n  }\n  return 'Unknown.Unknown';\n})();\n\nconst [ platformEnv, framework ] = platform.split('.');\n\nfunction dingtalkWebUrl(originalUrl){\n  const tpl = url.parse(originalUrl,'dd_wx_tpl');\n  const _wx_tpl = url.parse(originalUrl,'_wx_tpl');\n  return {\n    bundleUrl: tpl ? tpl : _wx_tpl ? _wx_tpl : '',\n    originalUrl\n  }\n}\n\nfunction getEnv(){\n  let containerEnv = {};\n  switch (framework){\n    case FRAMEWORK.VUE:\n        const config = weex.config;\n        const env = config.env;\n        containerEnv.platform = env.platform;\n        containerEnv.bundleFrameworkType = framework;\n        if (PLATFORMS.NATIVE === platformEnv){\n          containerEnv.appVersion = env.appVersion;\n          containerEnv.appName = env.appName;\n          containerEnv.dingtalk = {\n            bundleUrl: config.bundleUrl,\n            originalUrl: config.originalUrl\n          }\n        }\n        if (PLATFORMS.WEB === platformEnv){\n          containerEnv.dingtalk = dingtalkWebUrl(location.href);\n        }\n      break;\n    case FRAMEWORK.RAX:\n        if (PLATFORMS.NATIVE === platformEnv) {\n          containerEnv.bundleFrameworkType = framework;\n          containerEnv.platform = navigator.platform;\n          containerEnv.appName = navigator.appName;\n          containerEnv.appVersion = navigator.appVersion;\n          containerEnv.dingtalk = {\n            bundleUrl: __weex_options__.bundleUrl,\n            originalUrl: __weex_options__.originalUrl\n          };\n        }\n      break;\n    case FRAMEWORK.UNKNOWN:\n        if (PLATFORMS.WEB === platformEnv){\n          containerEnv.platform = PLATFORMS.WEB;\n        }\n        if (PLATFORMS.UNKNOWN === platformEnv){\n          log(['current platform environment is unknown, please checking.'],LogType.WARNING);\n          containerEnv.platform = PLATFORMS.UNKNOWN;\n        }\n        containerEnv.bundleFrameworkType = FRAMEWORK.UNKNOWN;\n        containerEnv.dingtalk = dingtalkWebUrl(location.href);\n      break;\n  }  \n  return containerEnv;\n}\n\nconst env = getEnv();\nconst isWeb = env.platform === 'Web';\nconst isWeexiOS = env.platform === 'iOS';\nconst isWeexAndroid = env.platform === 'android';\nconst isWeex = isWeexiOS || isWeexAndroid;\nconst { dingtalk, bundleFrameworkType } = env;\nconst { bundleUrl, originalUrl } = dingtalk;\n\nfunction ua(){\n  if(isWeb){\n    return window.navigator.userAgent.toLowerCase();\n  }\n  return '';\n}\n\nfunction getPcConf(){\n  let tempConf = {}\n  if(isWeb){\n    const frameName = window.name;\n    try{\n      const frameConf = JSON.parse(frameName);\n      tempConf.containerId = frameConf.containerId;\n      tempConf.version = frameConf.hostVersion;\n      tempConf.language = frameConf.language || '*';\n    }catch(e){\n      log([JSON.stringify(e)],LogType.WARNING);\n    }\n  }\n  return tempConf;\n}\n\nconst UA = ua();\nconst pcConf = getPcConf();\n\nfunction mdContainer(){\n  if (isWeex){\n    if (env.appName === 'DingTalk' || env.appName === 'com.alibaba.android.rimet'){\n      return true;\n    }\n    return false;\n  } else {\n    return UA.indexOf('dingtalk') > -1 || UA.indexOf('aliapp') > -1;\n  }\n}\n\nfunction pdContainer(){\n  if (isWeb){\n    return !!pcConf.containerId\n  }\n  return false;\n}\n\nfunction fetchVersion(){\n  if (isWeb){\n    if (pcConf.version){\n      return pcConf.version;\n    } else {\n      let matches = UA.match(/aliapp\\(\\w+\\/([a-zA-Z0-9.-]+)\\)/);\n      if (matches === null) {\n          matches = UA.match(/dingtalk\\/([a-zA-Z0-9.-]+)/);\n      }\n      let version = (matches && matches[1]) || 'Unknown';\n      return version;\n    }\n  } else {\n    return env.appVersion;\n  }\n}\n\nconst isWebiOS = /iphone|ipad|ipod|ios/.test(UA);\nconst isWebAndroid = UA.indexOf('android') > -1;\nconst version = fetchVersion();\nconst isMobileDingtalk = mdContainer();\nconst isWindowsDingtalk = UA.indexOf('dingtalk-win') > -1;\nconst isMac = UA.indexOf('mac') > -1;\nconst isWin = UA.indexOf('win') > -1;\nconst isPC = pdContainer();\n\nexport default {\n  isMobileDingtalk,\n  isWindowsDingtalk,\n  isMac,\n  isWin,\n  isPC,\n  isWeb,\n  isWebiOS,\n  isWebAndroid,\n  isWeex,\n  isWeexiOS,\n  isWeexAndroid,\n  bundleFrameworkType,\n  bundleUrl,\n  originalUrl,\n  version,\n  platform: platform\n};\n"]}